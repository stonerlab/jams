SHELL = /bin/sh

withdebug=0
withcuda=1

cputype = $(shell uname -m | sed "s/\\ /_/g")
systype = $(shell uname -s)
commit = $(shell git rev-parse HEAD)


# Compiler information
CXX = g++
OPTFLAGS = -O3 -funroll-loops -funroll-all-loops
COPTIONS = -Wall -Wno-long-long -std=c++98 #-pedantic

CUDA = /usr/local/cuda/bin/nvcc
CUDAOPTS = -gencode=arch=compute_20,code=sm_20 -gencode=arch=compute_20,code=compute_20 \
		-gencode=arch=compute_35,code=sm_35 \
		  -gencode=arch=compute_35,code=compute_35 \
	   -O3 -DNDEBUG -DCUDA
#CUDAOPTS = -gencode=arch=compute_20,code=sm_20 -gencode=arch=compute_20,code=compute_20 \
	-gencode=arch=compute_13,code=sm_13 -gencode=arch=compute_13,code=compute_13 \
	--ptxas-options=-v -O3 -DNDEBUG -DCUDA

# Linker information
LDOPTIONS = 
LD = $(CXX)

# Compile input/output file specification
SOURCEFILE = -c $<
OUTPUTFILE = -o $@

# Output specification for executables
EXEOUTPUTFILE = -o $@

#----------------------------------------------------------------------
# System based overides
#----------------------------------------------------------------------

ifeq ($(systype),Linux)
	COPTIONS += -DLinux
endif

ifeq ($(systype),Darwin)
	withcuda=0
	CXX = g++
	COPTIONS += -DDarwin
endif

#----------------------------------------------------------------------
# Build specific options 
#----------------------------------------------------------------------

OPTFLAGS += -DGITCOMMIT=$(commit)

ifeq ($(withcuda),1)
	OPTFLAGS += -DCUDA
endif

ifeq ($(withdebug),1)
	OPTFLAGS += -g -DDEBUG
	LDOPTIONS += -g
else 
	OPTFLAGS += -DNDEBUG	# turn off asserts
endif

LIBCONFIGDIR = ./libconfig

header-dirs = $(sort $(dir $(shell find $(TOPDIR) -name '*.h'))) 
HEADERS = $(foreach d, $(header-dirs), $(wildcard $d*.h)) Makefile

INCLUDES = $(foreach d, $(header-dirs), -I$d) -I/sfw/libconfig-1.4.9/include -I/usr/local/cuda/include -I/opt/intel/Compiler/11.1/059/mkl/include
CFLAGS = $(COPTIONS) $(OPTFLAGS) $(INCLUDES)

MKLroot = /opt/intel/Compiler/11.1/059/mkl/lib/em64t

ifeq ($(withcuda),1)
	ifeq ($(cputype),x86_64)
		LIBSDIR = -L/usr/local/cuda/lib64
	else
		LIBSDIR = -L/usr/local/cuda/lib
	endif
		LIBS = -lcudart -lcurand -lcublas -lcusparse
endif

LIBS +=  -lfftw3 /sfw/libconfig-1.4.9/lib/libconfig++.a \
				 #-Wl,--start-group $(MKLroot)/libmkl_intel_lp64.a $(MKLroot)/libmkl_sequential.a $(MKLroot)/libmkl_core.a -Wl,--end-group -lpthread


LDFLAGS = $(LIBSDIR)
