// 2022-01-28 Sean Stansill ll14s26s@leeds.ac.uk
//
// This script simulates a long magnetisation time series 
// to calculate the FMR frequency at finite temperature.
//
// Using the quantum thermostat, we aim to test the temperature scaling
// of anisotropy without using constrained monte carlo (which is classical)


// Using a hypothetical material
// Damping should be kept moderate. Low damping gives cleaner correlations (smaller linewidth)
// but high damping is needed when using the quantum thermostat
// Test alpha=0.05 first. Try 0.01 if the correlations aren't clean. Note: In future0.05 
// might have a more accurate FFT. Using 0.01, the frequency resolution is comparable to the linewidth
 
materials = (
{
  name = "A";
  moment = 1.0;
  spin = [0.0, 0.0, 1.0];
  alpha = 0.01;
});


// Use a simple cubic cell for consistency with the domain wall calculations
unitcell : {
  parameter = 0.1e-9;

basis = (
  [1.0, 0.0, 0.0],
  [0.0, 1.0, 0.0],
  [0.0, 0.0, 1.0]);

positions = (
  ("A", [0.0, 0.0, 0.0])
);
};

// The system size here doesn't matter too much. It can be arbitrarily large
// as increasing size is very cheap on the GPU
lattice : {
  size = [64, 64, 64];
  periodic = [true, true, true];
};


// We want three Hamiltonian terms: exchange, uniaxial anisotropy and a B field
// The B field provides a quantisation axis. We wish to probe the anisotropy, not exchange
// so this can be artificially large
hamiltonians = (

{
  module = "exchange";
  symops = true;
  interactions = (
    ("A", "A", [1.0, 0.0, 0.0], 3.0e-21)
  );
},

{
  module = "uniaxial";
  order = "K1";
  anisotropies = (
    // Here a positive anisotropy constant is easy axis
    // Since this is simple cubic 1e-24 is large compared to exchange
    ("A", [0.0, 0.0, 1.0], 1e-24)
  );
},

{
  module = "zeeman";
  // Field is in units of Tesla. For muS=1, 
  // this is an eneregy of around 1e-23
  dc_local_field=([0.0, 0.0, 0.01]);
}

);

// Before defining the solver and monitors it is useful to calculate the FMR
// frequency at zero temperature (being careful with factors of 2pi).
// \hbar \omega = gS\mu_B B + 2JS(1-\gamma_k) + 2SK1
//
// This gives a k=0 mode of \hbar \omega_0 = gS\mu_B B +2SK1
// Plugging in the values from the config gives \hbar \omega_{k=0} ~ 3.9e-24 J 
// This gives a frequency (f) ~ 5.8e9 Hz = 5.8GHz
//
// This means out time resolution must be much greater than the period of spin waves
// given as T = 1.7e-10s
// Let's say we want 100 points per period and we use the RK4 solver with a t_step of 
// 1e-15. This means we need to print the magnetisation every 1700 steps. We will choose
// something a bit smaller than this. Choose 200 steps as a check on the smoothness of
// the correltions

// Add the quantum thermostat
solver : {
  module = "llg-rk4-gpu";
  t_min = 1e-15;
  t_max = 1e-9;
  t_step = 1e-15;
  thermostat = "langevin-bose-gpu";
};

// We need both magnetisation and the hdf5 for the production run
monitors = (
{
  module = "magnetisation";
  output_steps = 500;
},
{
  module = "hdf5";
  output_steps=0;
}
);

// Use a sensibly low (and sensibly high) temperature to check both extremes of the
// simulation in a temperature sweep
physics : {
temperature = 10.0;
};
