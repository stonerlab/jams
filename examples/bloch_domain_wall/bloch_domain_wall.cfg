// 2022-02-07 Joseph Barker (j.barker@leeds.ac.uk)
//
// This config simulates a Bloch domain wall which is kept stable using pinned
// magnetisation boundaries. It is primarily and example of how to use the
// "bloch_domain_wall" initializer and "pinned_boundaries" physics module.
//
// With this config we can simulate Bloch domain walls at finite temperature to
// study their properties or infer the temperature (or magnetisation) dependence
// of the exchange stiffness.

// A single generic material
materials = (
  { name      = "A";
    moment    = 3.0;
    alpha     = 0.1;
    spin      = [0.0, 0.0, 1.0];
  }
);


// Simple cubic lattice
unitcell: {
  parameter = 0.3e-9;

  basis = (
    [1.0, 0.0, 0.0],
    [0.0, 1.0, 0.0],
    [0.0, 0.0, 1.0]);

  positions = (
      ("A", [0.00, 0.00, 0.00]));
};


// The "bloch_domain_wall" initializer and "pinned_boundaries" physics modules
// assume the domain wall lies in the x-direction. We therefore want a long
// system along x without periodic boundaries. In the y and z directions we
// can use smaller dimensions and have periodic boundaries to reduce surface
// effects.
lattice : {
  size     = [256, 16, 16];
  periodic = [false, true, true];
};


// We define a uniaxial anisotropy and an exchange term. We only need one
// exchange interaction because the symmetry operations will fill in the rest.
hamiltonians = (
  {
    module = "uniaxial";
    order = "K1";
    anisotropies = ( ( "A", [ 0.0, 0.0, 1.0 ], 1e-23 ) );
  },
  {
    module = "exchange";
    interactions = (("A", "A", [ 1.0, 0.0, 0.0], 3.5e-21));
  }
);


// Comment out either the CPU or GPU solver.

// Solve on the CPU. We only have Heun here so need a small time step. This is
// only for testing really (especially on the size of system defined above).
//solver : {
//  module = "llg-heun-cpu";
//  t_step = 1e-16;
//  t_max = 10e-9;
//};

// Solve on the GPU. RK4 allows a much larger time step. It's still going to
// be slow because of the pinned boundaries (see notes below). We can also
// use the quantum thermostat ("langevin-bose-gpu") which is not implemented
// on the CPU.
 solver : {
   module = "llg-rk4-gpu";
   t_step = 1e-15;
   t_max  = 1e-9;
   // Uncomment to use the quantum thermostat
   // thermostat = "langevin-bose-gpu";
 };


// The domain wall width at zero temperature will be w = pi \sqrt{A/K} nanometers.
///
// NOTE: We are using the convention for width which includes a factor of
// pi. i.e. = pi \sqrt{A/K}. This factor of pi is an arbitrary choice in the
// definition of width. Some authors use it some don't. Including the pi gives
// are much better feeling for the extent of the domain wall when trying to fit
// it into a finite size simulation box.
//
// In the initializer we must give the parameter in units of lattice constants,
// i.e. w/a = (pi/a) \sqrt{A/K}. The conversion to J (Heisenberg exchange in JAMS
// 1/2 convention) and k (single ion anisotropy) using A = J/2a, K = k/a^3 is
// w/a = pi \sqrt{J / (2k)}. See Kazantseva, Phys. Rev. Lett. 94, 037206 (2005)
// (https://dx.doi.org/10.1103/physrevlett.94.037206) for the details of
// simulating Bloch walls.
//
// Documentation about this initializer can be found in
// "jams/initializer/init_bloch_domain_wall.h"
//
initializer : {
  module = "bloch_domain_wall";
  width = 41.56;  // w/a = pi \sqrt{J / (2k)}
  center = 128.0; // put the wall in the middle of the system along the x-axis
};


// To stop the system relaxing to the ferromagnetic state we use pinned
// boundaries. This means the magnetisation at each end of the x-direction is
// held in a fixed direction by a rotation of the spins every time step. We hold
// the left side magnetisation in the -z direction and the right size in the +z
// direction (this is the same as the JAMS implementation of a Bloch domain wall
// in the initializer).
//
// The pinned region should be quite far from the domain wall to stop any
// artefacts from the pinning. We also note that because we are using a finite
// system along x, there will be surface effects such as surface magnon modes.
// Again using, a long system along x will minimise the effect of these.
// An alternative used in the literature at anti-periodic boundaries where a
// periodic boundary is used along x but with antiferromagnetic coupling across
// the boundary. In my opinion (without testing) this could do extremely
// strange things to the magnons, especially as thermal magnons propagate
// through the boundary so we're not doing that here.
// See Moreno, Phys. Rev. B 94, 104433 (2016)
// (https://dx.doi.org/10.1103/physrevb.94.104433) for where anti-periodic
// boundaries have been used by others.
//
// Documentation about this physics module can be found in
// "jams/physics/pinned_boundaries.h"
//
physics: {
  module = "pinned_boundaries";
  left_pinned_magnetisation = [0.0, 0.0,-1.0];
  right_pinned_magnetisation = [0.0, 0.0, 1.0];
  temperature = 1.0;
  left_pinned_cells  = 1;
  right_pinned_cells = 1;
}


// We can use the "magnetisation-layers" monitor to output the magnetisation
// of each layer along the x-axis. This will give the profile of the domain
// wall. This is significantly more efficient both in the JAMS run and post
// processing than dumping all of the spin data, especially in terms of file
// size. The output is a h5 file and the example script
// "bloch_domain_wall_fitting.py" shows how to read this file and fit the domain
// wall profile.
//
// Documentation about this monitor can be found in
// "jams/monitors/magnetisation_layers.h"
//
monitors = (
  {
    module = "magnetisation-layers";
    output_steps = 1000;
    layer_normal = [1, 0, 0];
  }
);

// ----------------------------- END-OF-FILE ----------------------------------
